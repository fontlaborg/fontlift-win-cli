# this_file: .github/workflows/build.yml
# CI Build Workflow - builds and tests on every push and PR

name: CI Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for git describe

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1

    - name: Resolve version
      id: version
      shell: pwsh
      run: |
        # Call get-version.ps1 to derive version from git tags
        # Returns JSON with: base (X.Y.Z), semver (X.Y.Z-pre+build), tag (vX.Y.Z...)
        # Handles repos without tags by falling back to 0.0.0-dev.{count}+g{sha}
        # FALLBACK: If version resolution fails, use safe defaults
        try {
          $json = & scripts/get-version.ps1 -Format Json -ErrorAction Stop
          $info = $json | ConvertFrom-Json
          $base = $info.base
          $semver = $info.semver
          $tag = $info.tag
        } catch {
          Write-Warning "Version resolution failed: $_"
          Write-Warning "Using fallback version 0.0.0-unknown"
          $base = "0.0.0"
          $semver = "0.0.0-unknown"
          $tag = "v0.0.0-unknown"
        }

        # Export to GITHUB_ENV for use in subsequent steps
        "VERSION_BASE=$base" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        "VERSION_SEMVER=$semver" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        "VERSION_TAG=$tag" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        Write-Host "Resolved version: $semver (tag: $tag)"

    - name: Display version
      shell: cmd
      run: |
        echo Building base version %VERSION_BASE%
        echo Building semantic version %VERSION_SEMVER%

    - name: Build
      shell: cmd
      run: build.cmd %VERSION_SEMVER%

    - name: Test executable exists
      shell: cmd
      run: |
        if not exist build\fontlift.exe exit /b 1
        echo Build successful - fontlift.exe created

    - name: Test executable runs
      shell: cmd
      run: |
        REM Running without args shows usage (exit code 1), which is expected
        build\fontlift.exe
        if %ERRORLEVEL% EQU 1 (
          echo Executable runs correctly - showed usage message
        ) else (
          echo ERROR: Unexpected exit code %ERRORLEVEL%
          exit /b 1
        )

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: fontlift-${{ env.VERSION_TAG }}
        path: build/fontlift.exe
        retention-days: 7
