# this_file: .github/workflows/release.yml
# Release Workflow - creates GitHub releases when tags are pushed

name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1

    - name: Resolve version from tag
      id: version
      shell: pwsh
      run: |
        $ref = $env:GITHUB_REF
        Write-Host "GITHUB_REF = $ref"

        # Multi-level fallback strategy for version resolution
        $base = $null
        $semver = $null
        $tag = $null

        # Level 1: Try to extract version from tag and validate with get-version.ps1
        try {
          # Extract tag name from refs/tags/vX.Y.Z
          if ($ref -match '^refs/tags/v?(.+)$') {
            $version = $matches[1]
            Write-Host "Extracted version from tag: $version"

            # Validate and format with get-version.ps1
            $json = & scripts/get-version.ps1 -TargetVersion "$version" -Format Json -ErrorAction Stop
            $info = $json | ConvertFrom-Json
            $base = $info.base
            $semver = $info.semver
            $tag = $info.tag
            Write-Host "Validated version: $semver"
          } else {
            throw "Unable to match version pattern in ref: $ref"
          }
        } catch {
          Write-Warning "Level 1 failed: $_"

          # Level 2: Try to use raw tag name directly
          try {
            if ($ref -match '^refs/tags/v?(.+)$') {
              $version = $matches[1]
              # Basic version validation: X.Y.Z format
              if ($version -match '^\d+\.\d+\.\d+') {
                $base = $version -replace '[-+].*$', ''
                $semver = $version
                $tag = "v$version"
                Write-Warning "Level 2: Using raw tag version: $semver"
              } else {
                throw "Invalid version format: $version"
              }
            } else {
              throw "Cannot extract version from ref"
            }
          } catch {
            Write-Warning "Level 2 failed: $_"

            # Level 3: Last resort - use timestamp-based version
            $timestamp = Get-Date -Format "yyyyMMdd.HHmmss"
            $base = "0.0.0"
            $semver = "0.0.0-unknown.$timestamp"
            $tag = "v$semver"
            Write-Warning "Level 3: Using fallback version: $semver"
          }
        }

        # Export to GITHUB_ENV
        "VERSION_BASE=$base" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        "VERSION_SEMVER=$semver" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        "VERSION_TAG=$tag" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        Write-Host "Final resolved version: $semver (tag: $tag)"

    - name: Build release
      shell: cmd
      run: build.cmd %VERSION_SEMVER%

    - name: Package release
      shell: cmd
      run: publish.cmd %VERSION_SEMVER%

    - name: Generate checksums
      shell: cmd
      run: |
        cd dist
        certutil -hashfile fontlift-%VERSION_TAG%.zip SHA256 > checksums.txt
        type checksums.txt

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/fontlift-${{ env.VERSION_TAG }}.zip
          dist/checksums.txt
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## fontlift-win-cli ${{ env.VERSION_TAG }}

          Windows CLI tool for font installation and management.

          ### Installation
          1. Download `fontlift-${{ env.VERSION_TAG }}.zip`
          2. Verify checksum (see `checksums.txt`)
          3. Extract `fontlift.exe` to a directory in your PATH
          4. Run `fontlift.exe` from an elevated command prompt

          ### Usage
          ```
          fontlift list              List installed fonts
          fontlift install font.ttf  Install a font
          fontlift uninstall -n Arial  Uninstall a font
          fontlift remove -p font.ttf  Remove font and delete file
          ```

          See [README.md](https://github.com/fontlaborg/fontlift-win-cli/blob/main/README.md) for full documentation.
